"use strict";

var Promise = require("i-promise");
var mssql = require("mssql");
var stringify = require("json-stable-stringify");
var clone = require("safe-clone-deep");
var shadowClose = require("./shadow-close");
var query = require("../query");
var assign = require("../util/assign");

var _require = require("../cache");

var connections = _require.connections;
var promises = _require.promises;

var debug = require("debug")("mssql-ng");

module.exports = getConnection;

//gets/uses a pooled connection against the options specified
function getConnection(options) {
  debug("getConnection", "start", options);

  var key = null;
  var promise = null;
  try {
    //clone options
    options = clone(options);

    //serialize the options as a key for pools
    key = stringify(options || {});

    //if there's already a promise for the given connection, return it
    if (promises[key]) return promises[key];

    //create a new promise for the given connection options
    promise = promises[key] = createConnectionPromise(key, options);

    debug("getConnection", "success");
    return promise;
  } catch (err) {
    debug("getConnection", "error", err);
    return Promise.reject(err);
  }
};

//creates a promise that will resolve/reject an mssql connection for the options
function createConnectionPromise(key, options) {

  debug("createConnectionPromise", "start");

  //create promise that resolves to a connection
  var promise = new Promise(function (resolve, reject) {
    //create a new mssql connection
    var connection = new mssql.Connection(options, function (err) {
      return handleConnectionCallback(err, resolve, reject, key, connection);
    });
    debug("createConnectionPromise", "success");
  });

  //add mssql types to promise - convenience access
  assign(promise, mssql.TYPES); //add mssql types to promise being returned
  promise.MAX = mssql.MAX;

  //back reference to cache
  promise._mssqlngKey = key;

  //extended methods
  promise.close = function () {
    return promise.then(function (conn) {
      return conn.close();
    })["catch"](function () {
      delete promises[key];delete connections[key];
    });
  };
  promise.query = function (templateParts) {
    for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }

    return promise.then(function (conn) {
      return query(conn, {}, templateParts, params);
    });
  };
  promise.queryStream = function (templateParts) {
    for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }

    return promise.then(function (conn) {
      return query(conn, { stream: true }, templateParts, params);
    });
  };
  promise.output = require("../parameters/output");
  promise.input = require("../parameters/input");

  debug("createConnectionPromise", "success");
  return promise;
}

//handle promise resolution for connection callback
function handleConnectionCallback(err, resolve, reject, key, connection) {
  debug("handleConnectionCallback", "start");

  //error, remove cached entry, reject the promise
  if (err) {
    debug("handleConnectionCallback", "error", err);
    delete promises[key];
    return reject(err);
  }

  //patch close method for caching
  shadowClose(connection);

  //create a reference to the original connection for cleanup
  connection._mssqlngKey = key;
  connection.input = require("../parameters/input");
  connection.output = require("../parameters/input");

  //add connection to the pool
  connections[connection._mssqlngKey] = connection;

  //resolve the promise
  debug("handleConnectionCallback", "success");
  return resolve(connection);
}
//# sourceMappingURL=data:application/json;base64,