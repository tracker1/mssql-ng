"use strict";

require("cc-globals");

var _require = require("../cache");

var connections = _require.connections;
var promises = _require.promises;

module.exports = closeConnection;

//close a specific connection, if no options specified, deletes all connections
function closeConnection(options) {
  //no options, close/delete all connection references
  if (!options) {
    try {
      mssql.close();
    } catch (err) {}

    //create list to track items to close
    var closeList = [];

    //iterate through each connection
    for (var _key in promises) {
      //if there's a close method (connection match), add it to the list
      if (promises[_key] && typeof promises[_key].close === "function") closeList.push(promises[_key]);
    }

    //iterate through list and close each connection
    closeList.forEach(function (item) {
      return item.close();
    });
  }

  //either a connection promise, or a connection
  if (options._mssqlngKey && typeof options.close === "function") {
    return options.close();
  } //match against connection options
  var key = stringify(options || {});
  if (connections[key]) connections[key].close();
  if (promises[key]) promises[key].then(function (conn) {
    return conn.close();
  })["catch"](function () {
    delete promises[key];delete connections[key];
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25uZWN0aW9ucy9jbG9zZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQzs7ZUFFTyxPQUFPLENBQUMsVUFBVSxDQUFDOztJQUEzQyxXQUFXLFlBQVgsV0FBVztJQUFDLFFBQVEsWUFBUixRQUFROztBQUV6QixNQUFNLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQzs7O0FBR2pDLFNBQVMsZUFBZSxDQUFDLE9BQU8sRUFBRTs7QUFFaEMsTUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNaLFFBQUk7QUFDRixXQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDZixDQUFDLE9BQU0sR0FBRyxFQUFDLEVBQUU7OztBQUdkLFFBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQzs7O0FBR25CLFNBQUssSUFBSSxJQUFHLElBQUksUUFBUSxFQUFFOztBQUV4QixVQUFJLFFBQVEsQ0FBQyxJQUFHLENBQUMsSUFBSSxPQUFPLFFBQVEsQ0FBQyxJQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUM7S0FDL0Y7OztBQUdELGFBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO2FBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtLQUFBLENBQUMsQ0FBQztHQUN6Qzs7O0FBR0QsTUFBSSxPQUFPLENBQUMsV0FBVyxJQUFJLE9BQU8sT0FBTyxDQUFDLEtBQUssS0FBSyxVQUFVO0FBQUUsV0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7R0FBQTtBQUd2RixNQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLE1BQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQyxNQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSTtXQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7R0FBQSxDQUFDLFNBQU0sQ0FBQyxZQUFJO0FBQUUsV0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQUFBQyxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtHQUFFLENBQUMsQ0FBQztDQUMxSCIsImZpbGUiOiJzcmMvY29ubmVjdGlvbnMvY2xvc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdjYy1nbG9iYWxzJyk7XG5cbmxldCB7Y29ubmVjdGlvbnMscHJvbWlzZXN9ID0gcmVxdWlyZSgnLi4vY2FjaGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbG9zZUNvbm5lY3Rpb247XG5cbi8vY2xvc2UgYSBzcGVjaWZpYyBjb25uZWN0aW9uLCBpZiBubyBvcHRpb25zIHNwZWNpZmllZCwgZGVsZXRlcyBhbGwgY29ubmVjdGlvbnNcbmZ1bmN0aW9uIGNsb3NlQ29ubmVjdGlvbihvcHRpb25zKSB7XG4gIC8vbm8gb3B0aW9ucywgY2xvc2UvZGVsZXRlIGFsbCBjb25uZWN0aW9uIHJlZmVyZW5jZXNcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1zc3FsLmNsb3NlKCk7XG4gICAgfSBjYXRjaChlcnIpe31cblxuICAgIC8vY3JlYXRlIGxpc3QgdG8gdHJhY2sgaXRlbXMgdG8gY2xvc2VcbiAgICBsZXQgY2xvc2VMaXN0ID0gW107XG5cbiAgICAvL2l0ZXJhdGUgdGhyb3VnaCBlYWNoIGNvbm5lY3Rpb25cbiAgICBmb3IgKGxldCBrZXkgaW4gcHJvbWlzZXMpIHtcbiAgICAgIC8vaWYgdGhlcmUncyBhIGNsb3NlIG1ldGhvZCAoY29ubmVjdGlvbiBtYXRjaCksIGFkZCBpdCB0byB0aGUgbGlzdFxuICAgICAgaWYgKHByb21pc2VzW2tleV0gJiYgdHlwZW9mIHByb21pc2VzW2tleV0uY2xvc2UgPT09ICdmdW5jdGlvbicpIGNsb3NlTGlzdC5wdXNoKHByb21pc2VzW2tleV0pO1xuICAgIH1cblxuICAgIC8vaXRlcmF0ZSB0aHJvdWdoIGxpc3QgYW5kIGNsb3NlIGVhY2ggY29ubmVjdGlvblxuICAgIGNsb3NlTGlzdC5mb3JFYWNoKChpdGVtKT0+aXRlbS5jbG9zZSgpKTtcbiAgfVxuXG4gIC8vZWl0aGVyIGEgY29ubmVjdGlvbiBwcm9taXNlLCBvciBhIGNvbm5lY3Rpb25cbiAgaWYgKG9wdGlvbnMuX21zc3FsbmdLZXkgJiYgdHlwZW9mIG9wdGlvbnMuY2xvc2UgPT09ICdmdW5jdGlvbicpIHJldHVybiBvcHRpb25zLmNsb3NlKCk7XG5cbiAgLy9tYXRjaCBhZ2FpbnN0IGNvbm5lY3Rpb24gb3B0aW9uc1xuICBsZXQga2V5ID0gc3RyaW5naWZ5KG9wdGlvbnMgfHwge30pO1xuICBpZiAoY29ubmVjdGlvbnNba2V5XSkgY29ubmVjdGlvbnNba2V5XS5jbG9zZSgpO1xuICBpZiAocHJvbWlzZXNba2V5XSkgcHJvbWlzZXNba2V5XS50aGVuKChjb25uKT0+Y29ubi5jbG9zZSgpKS5jYXRjaCgoKT0+eyBkZWxldGUgcHJvbWlzZXNba2V5XTsgZGVsZXRlIGNvbm5lY3Rpb25zW2tleV0gfSk7XG59XG4iXX0=