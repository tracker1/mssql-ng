"use strict";

var mssql = require("mssql");
var debug = require("debug")("mssql-ng");

module.exports = cleanParameter;

function cleanParameter(value) {
  debug("cleanParameter", "begin", value, typeof value);

  //null or empty
  if (value === null || typeof value === "undefined") {
    return [mssql.Bit, null];
  }switch (typeof value) {
    case "boolean":
      return [mssql.Bit, value];

    case "number":
      //if 32-bit integer, use integer
      if (~ ~value === value) {
        return [mssql.Int, value];
      } //64-bit integer
      if (Math.floor(value) === Math.ceil(value)) [mssql.BigInt, value];

      //use float - closest match, note, bignum should match out
      return request.input(valueName, mssql.Float, value);

    case "object":
      //date
      if (typeof value.toISOString === "function") {
        return [mssql.DateTimeOffset, value.toISOString()];
      } //buffer
      if (Buffer.isBuffer(value)) {
        return [mssql.VarBinary(value.length <= 8000 ? value.length : mssql.MAX), value];
      } //WARNING: INTENTIONAL FALL-THROUGH
      //fall-through with string
      value = JSON.stringify(clone(value));

    case "string":
      value = value.trim(); //trim string

      //uuid
      if (/^\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}‌​\}?$/.test(value)) {
        return [mssql.UniqueIdentifier, value.replace(/[\{\}]/g, "")];
      } //other strings
      return [mssql.NVarChar(value.length <= 8000 ? value.legth : mssql.MAX), value];
  }
  //no match, nullify - shouldn't happen
  return [mssql.Bit, null];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9jbGVhbi1wYXJhbWV0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUV6QyxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQzs7QUFFaEMsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFO0FBQzdCLE9BQUssQ0FBQyxnQkFBZ0IsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUM7OztBQUdwRCxNQUFJLEtBQUssS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssV0FBVztBQUFFLFdBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQUEsQUFFN0UsUUFBUSxPQUFPLEtBQUs7QUFDbEIsU0FBSyxTQUFTO0FBQ1osYUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBQUEsQUFFNUIsU0FBSyxRQUFROztBQUVYLFVBQUksRUFBQyxDQUFDLEtBQUssS0FBSyxLQUFLO0FBQUUsZUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FBQTtBQUdqRCxVQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7OztBQUdsRSxhQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBQUEsQUFFdEQsU0FBSyxRQUFROztBQUVYLFVBQUksT0FBTyxLQUFLLENBQUMsV0FBVyxLQUFLLFVBQVU7QUFBRSxlQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztPQUFBO0FBR2hHLFVBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFBRSxlQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztPQUFBOztBQUk3RyxXQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFBQSxBQUV2QyxTQUFLLFFBQVE7QUFDWCxXQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDOzs7QUFHckIsVUFBSSx1RkFBdUYsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQUUsZUFBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO09BQUE7QUFHdEssYUFBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxHQUNsRjs7QUFFRCxTQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJzcmMvcXVlcnkvY2xlYW4tcGFyYW1ldGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1zc3FsID0gcmVxdWlyZSgnbXNzcWwnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ21zc3FsLW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xlYW5QYXJhbWV0ZXI7XG5cbmZ1bmN0aW9uIGNsZWFuUGFyYW1ldGVyKHZhbHVlKSB7XG4gIGRlYnVnKCdjbGVhblBhcmFtZXRlcicsJ2JlZ2luJyx2YWx1ZSwgdHlwZW9mIHZhbHVlKTtcblxuICAvL251bGwgb3IgZW1wdHlcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBbbXNzcWwuQml0LCBudWxsXTtcblxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOiBcbiAgICAgIHJldHVybiBbbXNzcWwuQml0LCB2YWx1ZV07XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgLy9pZiAzMi1iaXQgaW50ZWdlciwgdXNlIGludGVnZXJcbiAgICAgIGlmICh+fnZhbHVlID09PSB2YWx1ZSkgcmV0dXJuIFttc3NxbC5JbnQsIHZhbHVlXTtcblxuICAgICAgLy82NC1iaXQgaW50ZWdlclxuICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpID09PSBNYXRoLmNlaWwodmFsdWUpKSBbbXNzcWwuQmlnSW50LCB2YWx1ZV07XG5cbiAgICAgIC8vdXNlIGZsb2F0IC0gY2xvc2VzdCBtYXRjaCwgbm90ZSwgYmlnbnVtIHNob3VsZCBtYXRjaCBvdXRcbiAgICAgIHJldHVybiByZXF1ZXN0LmlucHV0KHZhbHVlTmFtZSwgbXNzcWwuRmxvYXQsIHZhbHVlKTtcblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAvL2RhdGVcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUudG9JU09TdHJpbmcgPT09ICdmdW5jdGlvbicpIHJldHVybiBbbXNzcWwuRGF0ZVRpbWVPZmZzZXQsIHZhbHVlLnRvSVNPU3RyaW5nKCldO1xuXG4gICAgICAvL2J1ZmZlclxuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHJldHVybiBbbXNzcWwuVmFyQmluYXJ5KHZhbHVlLmxlbmd0aCA8PSA4MDAwID8gdmFsdWUubGVuZ3RoIDogbXNzcWwuTUFYKSwgdmFsdWVdO1xuXG4gICAgICAvL1dBUk5JTkc6IElOVEVOVElPTkFMIEZBTEwtVEhST1VHSFxuICAgICAgLy9mYWxsLXRocm91Z2ggd2l0aCBzdHJpbmdcbiAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkoY2xvbmUodmFsdWUpKTtcblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTsgLy90cmltIHN0cmluZ1xuXG4gICAgICAvL3V1aWRcbiAgICAgIGlmICgvXlxcez9bMC05YS1mQS1GXXs4fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXs0fS1bMC05YS1mQS1GXXsxMn3igIzigItcXH0/JC8udGVzdCh2YWx1ZSkpIHJldHVybiBbbXNzcWwuVW5pcXVlSWRlbnRpZmllciwgdmFsdWUucmVwbGFjZSgvW1xce1xcfV0vZywnJyldO1xuXG4gICAgICAvL290aGVyIHN0cmluZ3NcbiAgICAgIHJldHVybiBbbXNzcWwuTlZhckNoYXIodmFsdWUubGVuZ3RoIDw9IDgwMDAgPyB2YWx1ZS5sZWd0aCA6IG1zc3FsLk1BWCksIHZhbHVlXTtcbiAgfVxuICAvL25vIG1hdGNoLCBudWxsaWZ5IC0gc2hvdWxkbid0IGhhcHBlblxuICByZXR1cm4gW21zc3FsLkJpdCwgbnVsbF07XG59Il19