"use strict";

var mssql = require("mssql");
var debug = require("debug")("mssql-ng");
var clone = require("safe-clone-deep");

module.exports = cleanParameter;

function cleanParameter(value) {
  debug("cleanParameter", "begin", value, typeof value);

  //null or empty
  if (value === null || typeof value === "undefined") {
    return [mssql.Bit, null];
  }switch (typeof value) {
    case "boolean":
      return [mssql.Bit, value];

    case "number":
      //if 32-bit integer, use integer
      if (~ ~value === value) {
        return [mssql.Int, value];
      } //64-bit integer
      if (Math.floor(value) === Math.ceil(value)) [mssql.BigInt, value];

      //use float - closest match, note, bignum should match out
      return request.input(valueName, mssql.Float, value);

    case "object":
      //date
      if (typeof value.toISOString === "function") {
        return [mssql.DateTimeOffset, value.toISOString()];
      } //buffer
      if (Buffer.isBuffer(value)) {
        return [mssql.VarBinary(value.length <= 8000 ? value.length : mssql.MAX), value];
      } //WARNING: INTENTIONAL FALL-THROUGH
      //fall-through with string
      value = JSON.stringify(clone(value));

    case "string":
      value = value.trim(); //trim string

      //uuid
      if (/^\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}‌​\}?$/.test(value)) {
        return [mssql.UniqueIdentifier, value.replace(/[\{\}]/g, "")];
      } //other strings
      return [mssql.NVarChar(value.length <= 8000 ? value.legth : mssql.MAX), value];
  }
  //no match, nullify - shouldn't happen
  return [mssql.Bit, null];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9jbGVhbi1wYXJhbWV0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUV2QyxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQzs7QUFFaEMsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFO0FBQzdCLE9BQUssQ0FBQyxnQkFBZ0IsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUM7OztBQUdwRCxNQUFJLEtBQUssS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssV0FBVztBQUFFLFdBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQUEsQUFFN0UsUUFBUSxPQUFPLEtBQUs7QUFDbEIsU0FBSyxTQUFTO0FBQ1osYUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBQUEsQUFFNUIsU0FBSyxRQUFROztBQUVYLFVBQUksRUFBQyxDQUFDLEtBQUssS0FBSyxLQUFLO0FBQUUsZUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FBQTtBQUdqRCxVQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7OztBQUdsRSxhQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBQUEsQUFFdEQsU0FBSyxRQUFROztBQUVYLFVBQUksT0FBTyxLQUFLLENBQUMsV0FBVyxLQUFLLFVBQVU7QUFBRSxlQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztPQUFBO0FBR2hHLFVBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFBRSxlQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztPQUFBOztBQUk3RyxXQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFBQSxBQUV2QyxTQUFLLFFBQVE7QUFDWCxXQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDOzs7QUFHckIsVUFBSSx1RkFBdUYsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQUUsZUFBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO09BQUE7QUFHdEssYUFBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxHQUNsRjs7QUFFRCxTQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJzcmMvcXVlcnkvY2xlYW4tcGFyYW1ldGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1zc3FsID0gcmVxdWlyZSgnbXNzcWwnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ21zc3FsLW5nJyk7XG52YXIgY2xvbmUgPSByZXF1aXJlKCdzYWZlLWNsb25lLWRlZXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGVhblBhcmFtZXRlcjtcblxuZnVuY3Rpb24gY2xlYW5QYXJhbWV0ZXIodmFsdWUpIHtcbiAgZGVidWcoJ2NsZWFuUGFyYW1ldGVyJywnYmVnaW4nLHZhbHVlLCB0eXBlb2YgdmFsdWUpO1xuXG4gIC8vbnVsbCBvciBlbXB0eVxuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuIFttc3NxbC5CaXQsIG51bGxdO1xuXG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6IFxuICAgICAgcmV0dXJuIFttc3NxbC5CaXQsIHZhbHVlXTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAvL2lmIDMyLWJpdCBpbnRlZ2VyLCB1c2UgaW50ZWdlclxuICAgICAgaWYgKH5+dmFsdWUgPT09IHZhbHVlKSByZXR1cm4gW21zc3FsLkludCwgdmFsdWVdO1xuXG4gICAgICAvLzY0LWJpdCBpbnRlZ2VyXG4gICAgICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgPT09IE1hdGguY2VpbCh2YWx1ZSkpIFttc3NxbC5CaWdJbnQsIHZhbHVlXTtcblxuICAgICAgLy91c2UgZmxvYXQgLSBjbG9zZXN0IG1hdGNoLCBub3RlLCBiaWdudW0gc2hvdWxkIG1hdGNoIG91dFxuICAgICAgcmV0dXJuIHJlcXVlc3QuaW5wdXQodmFsdWVOYW1lLCBtc3NxbC5GbG9hdCwgdmFsdWUpO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIC8vZGF0ZVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZS50b0lTT1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIFttc3NxbC5EYXRlVGltZU9mZnNldCwgdmFsdWUudG9JU09TdHJpbmcoKV07XG5cbiAgICAgIC8vYnVmZmVyXG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkgcmV0dXJuIFttc3NxbC5WYXJCaW5hcnkodmFsdWUubGVuZ3RoIDw9IDgwMDAgPyB2YWx1ZS5sZW5ndGggOiBtc3NxbC5NQVgpLCB2YWx1ZV07XG5cbiAgICAgIC8vV0FSTklORzogSU5URU5USU9OQUwgRkFMTC1USFJPVUdIXG4gICAgICAvL2ZhbGwtdGhyb3VnaCB3aXRoIHN0cmluZ1xuICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeShjbG9uZSh2YWx1ZSkpO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpOyAvL3RyaW0gc3RyaW5nXG5cbiAgICAgIC8vdXVpZFxuICAgICAgaWYgKC9eXFx7P1swLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfeKAjOKAi1xcfT8kLy50ZXN0KHZhbHVlKSkgcmV0dXJuIFttc3NxbC5VbmlxdWVJZGVudGlmaWVyLCB2YWx1ZS5yZXBsYWNlKC9bXFx7XFx9XS9nLCcnKV07XG5cbiAgICAgIC8vb3RoZXIgc3RyaW5nc1xuICAgICAgcmV0dXJuIFttc3NxbC5OVmFyQ2hhcih2YWx1ZS5sZW5ndGggPD0gODAwMCA/IHZhbHVlLmxlZ3RoIDogbXNzcWwuTUFYKSwgdmFsdWVdO1xuICB9XG4gIC8vbm8gbWF0Y2gsIG51bGxpZnkgLSBzaG91bGRuJ3QgaGFwcGVuXG4gIHJldHVybiBbbXNzcWwuQml0LCBudWxsXTtcbn0iXX0=