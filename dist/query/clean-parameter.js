"use strict";

module.exports = cleanParameter;

function cleanParameter(value) {
  //null or empty
  if (value === null || typeof value === "undefined") {
    return [mssql.Bit, null];
  }switch (typeof value) {
    case "boolean":
      return [mssql.Bit, value];

    case "number":
      //if 32-bit integer, use integer
      if (~ ~value === value) {
        return [mssql.Int, value];
      } //64-bit integer
      if (Math.floor(value) === Math.ceil(value)) [mssql.BigInt, value];

      //use float - closest match, note, bignum should match out
      return request.input(valueName, mssql.Float, value);

    case "object":
      //date
      if (typeof value.toISOString === "function") {
        return [mssql.DateTimeOffset, value.toISOString()];
      } //buffer
      if (Buffer.isBuffer(value)) {
        return [mssql.VarBinary(value.length <= 8000 ? value.length : mssql.MAX), value];
      } //WARNING: INTENTIONAL FALL-THROUGH
      //fall-through with string
      value = JSON.stringify(clone(value));

    case "string":
      value = value.trim(); //trim string

      //uuid
      if (/^\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}‌​\}?$/.test(value)) {
        return [mssql.UniqueIdentifier, value.replace(/[\{\}]/g, "")];
      } //other strings
      return [mssql.NVarChar(value.length <= 8000 ? value.legth : mssql.MAX), value];
  }
  //no match, nullify - shouldn't happen
  return [mssql.Bit, null];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9jbGVhbi1wYXJhbWV0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQzs7QUFFaEMsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFOztBQUU3QixNQUFJLEtBQUssS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssV0FBVztBQUFFLFdBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQUEsQUFFN0UsUUFBUSxPQUFPLEtBQUs7QUFDbEIsU0FBSyxTQUFTO0FBQ1osYUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBQUEsQUFFNUIsU0FBSyxRQUFROztBQUVYLFVBQUksRUFBQyxDQUFDLEtBQUssS0FBSyxLQUFLO0FBQUUsZUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FBQTtBQUdqRCxVQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7OztBQUdsRSxhQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBQUEsQUFFdEQsU0FBSyxRQUFROztBQUVYLFVBQUksT0FBTyxLQUFLLENBQUMsV0FBVyxLQUFLLFVBQVU7QUFBRSxlQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztPQUFBO0FBR2hHLFVBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFBRSxlQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztPQUFBOztBQUk3RyxXQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFBQSxBQUV2QyxTQUFLLFFBQVE7QUFDWCxXQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDOzs7QUFHckIsVUFBSSx1RkFBdUYsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQUUsZUFBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO09BQUE7QUFHdEssYUFBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxHQUNsRjs7QUFFRCxTQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJzcmMvcXVlcnkvY2xlYW4tcGFyYW1ldGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjbGVhblBhcmFtZXRlcjtcblxuZnVuY3Rpb24gY2xlYW5QYXJhbWV0ZXIodmFsdWUpIHtcbiAgLy9udWxsIG9yIGVtcHR5XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gW21zc3FsLkJpdCwgbnVsbF07XG5cbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdib29sZWFuJzogXG4gICAgICByZXR1cm4gW21zc3FsLkJpdCwgdmFsdWVdO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIC8vaWYgMzItYml0IGludGVnZXIsIHVzZSBpbnRlZ2VyXG4gICAgICBpZiAofn52YWx1ZSA9PT0gdmFsdWUpIHJldHVybiBbbXNzcWwuSW50LCB2YWx1ZV07XG5cbiAgICAgIC8vNjQtYml0IGludGVnZXJcbiAgICAgIGlmIChNYXRoLmZsb29yKHZhbHVlKSA9PT0gTWF0aC5jZWlsKHZhbHVlKSkgW21zc3FsLkJpZ0ludCwgdmFsdWVdO1xuXG4gICAgICAvL3VzZSBmbG9hdCAtIGNsb3Nlc3QgbWF0Y2gsIG5vdGUsIGJpZ251bSBzaG91bGQgbWF0Y2ggb3V0XG4gICAgICByZXR1cm4gcmVxdWVzdC5pbnB1dCh2YWx1ZU5hbWUsIG1zc3FsLkZsb2F0LCB2YWx1ZSk7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgLy9kYXRlXG4gICAgICBpZiAodHlwZW9mIHZhbHVlLnRvSVNPU3RyaW5nID09PSAnZnVuY3Rpb24nKSByZXR1cm4gW21zc3FsLkRhdGVUaW1lT2Zmc2V0LCB2YWx1ZS50b0lTT1N0cmluZygpXTtcblxuICAgICAgLy9idWZmZXJcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSByZXR1cm4gW21zc3FsLlZhckJpbmFyeSh2YWx1ZS5sZW5ndGggPD0gODAwMCA/IHZhbHVlLmxlbmd0aCA6IG1zc3FsLk1BWCksIHZhbHVlXTtcblxuICAgICAgLy9XQVJOSU5HOiBJTlRFTlRJT05BTCBGQUxMLVRIUk9VR0hcbiAgICAgIC8vZmFsbC10aHJvdWdoIHdpdGggc3RyaW5nXG4gICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KGNsb25lKHZhbHVlKSk7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7IC8vdHJpbSBzdHJpbmdcblxuICAgICAgLy91dWlkXG4gICAgICBpZiAoL15cXHs/WzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ94oCM4oCLXFx9PyQvLnRlc3QodmFsdWUpKSByZXR1cm4gW21zc3FsLlVuaXF1ZUlkZW50aWZpZXIsIHZhbHVlLnJlcGxhY2UoL1tcXHtcXH1dL2csJycpXTtcblxuICAgICAgLy9vdGhlciBzdHJpbmdzXG4gICAgICByZXR1cm4gW21zc3FsLk5WYXJDaGFyKHZhbHVlLmxlbmd0aCA8PSA4MDAwID8gdmFsdWUubGVndGggOiBtc3NxbC5NQVgpLCB2YWx1ZV07XG4gIH1cbiAgLy9ubyBtYXRjaCwgbnVsbGlmeSAtIHNob3VsZG4ndCBoYXBwZW5cbiAgcmV0dXJuIFttc3NxbC5CaXQsIG51bGxdO1xufSJdfQ==