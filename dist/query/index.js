"use strict";

var Promise = require("i-promise");
var mssql = require("mssql");
var clone = require("safe-clone-deep");
var cleanParameter = require("./clean-parameter");

module.exports = processQuery;

function processQuery(connectionPromise, options, templateParts, params) {
  return connectionPromise.then(function (conn) {
    var request = new mssql.Request(conn);
    var query = templateParts[0]; //add first part, subsequent parts added inline
    var param = undefined;

    request.stream = !!(options && options.stream);

    for (var i = 0; i < params.length; i++) {
      paramName = addParam(request, i, params[i]);
      query += "@" + paramName + templateParts[i + 1];
    }

    //streaming request, resolve request
    if (request.stream) {
      request.query(query);
      return Promise.resolve(request);
    }

    //recordset request, return promise for result
    return new Promise(function (resolve, reject) {
      request.query(query, function (err, recordset) {
        //error processing query, reject promise
        if (err) return reject(err);

        //query successful, resolve promise
        return resolve({
          parameters: request.parameters,
          recordset: recordset || []
        });
      });
    });
  });
};

function addParam(request, index, param) {
  //param is method, call it with request/index - should return it's own parameter name
  if (typeof param === "function") {
    return param(request, index);
  }var paramName = "mssqlng_param_" + index.toString();
  request.input(paramName, param);

  //iife - allows for fast return from evaluation
  var clean = cleanParameter(param);
  return request.input(paramName, clean[0], clean[1]);

  //return parameter name used;
  return paramName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdkMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O0FBRWxELE1BQU0sQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDOztBQUU5QixTQUFTLFlBQVksQ0FBQyxpQkFBaUIsRUFBQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sRUFBQztBQUNuRSxTQUFPLGlCQUFpQixDQUNyQixJQUFJLENBQUMsVUFBUyxJQUFJLEVBQUM7QUFDbEIsUUFBSSxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLFFBQUksS0FBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixRQUFJLEtBQUssWUFBQSxDQUFDOztBQUVWLFdBQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQzs7QUFFL0MsU0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbEMsZUFBUyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLFdBQUssSUFBSSxHQUFHLEdBQUcsU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0M7OztBQUdELFFBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUNsQixhQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JCLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNqQzs7O0FBR0QsV0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBQyxNQUFNLEVBQUM7QUFDekMsYUFBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsVUFBUyxHQUFHLEVBQUMsU0FBUyxFQUFDOztBQUV6QyxZQUFJLEdBQUcsRUFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0FBRzVCLGVBQU8sT0FBTyxDQUFDO0FBQ2Isb0JBQVUsRUFBRSxPQUFPLENBQUMsVUFBVTtBQUM3QixtQkFBUyxFQUFFLFNBQVMsSUFBSSxFQUFFO1NBQzVCLENBQUMsQ0FBQztPQUNKLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUVKLENBQUMsQ0FBQztDQUNOLENBQUM7O0FBTUYsU0FBUyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7O0FBRXZDLE1BQUksT0FBTyxLQUFLLEtBQUssVUFBVTtBQUFFLFdBQU8sS0FBSyxDQUFDLE9BQU8sRUFBQyxLQUFLLENBQUMsQ0FBQztHQUFBLEFBRTdELElBQUksU0FBUyxHQUFHLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNwRCxTQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQzs7O0FBR2hDLE1BQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxTQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBR3BELFNBQU8sU0FBUyxDQUFDO0NBQ2xCIiwiZmlsZSI6InNyYy9xdWVyeS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQcm9taXNlID0gcmVxdWlyZSgnaS1wcm9taXNlJyk7XG5sZXQgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpO1xubGV0IGNsb25lID0gcmVxdWlyZSgnc2FmZS1jbG9uZS1kZWVwJyk7XG5sZXQgY2xlYW5QYXJhbWV0ZXIgPSByZXF1aXJlKCcuL2NsZWFuLXBhcmFtZXRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3NRdWVyeTtcblxuZnVuY3Rpb24gcHJvY2Vzc1F1ZXJ5KGNvbm5lY3Rpb25Qcm9taXNlLG9wdGlvbnMsdGVtcGxhdGVQYXJ0cyxwYXJhbXMpe1xuICByZXR1cm4gY29ubmVjdGlvblByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbihjb25uKXtcbiAgICAgIGxldCByZXF1ZXN0ID0gbmV3IG1zc3FsLlJlcXVlc3QoY29ubik7XG4gICAgICBsZXQgcXVlcnkgPSB0ZW1wbGF0ZVBhcnRzWzBdOyAvL2FkZCBmaXJzdCBwYXJ0LCBzdWJzZXF1ZW50IHBhcnRzIGFkZGVkIGlubGluZVxuICAgICAgbGV0IHBhcmFtO1xuXG4gICAgICByZXF1ZXN0LnN0cmVhbSA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJlYW0pO1xuXG4gICAgICBmb3IgKGxldCBpPTA7IGk8cGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcmFtTmFtZSA9IGFkZFBhcmFtKHJlcXVlc3QsIGksIHBhcmFtc1tpXSk7XG4gICAgICAgIHF1ZXJ5ICs9ICdAJyArIHBhcmFtTmFtZSArIHRlbXBsYXRlUGFydHNbaSsxXTsgICAgICAgIFxuICAgICAgfVxuXG4gICAgICAvL3N0cmVhbWluZyByZXF1ZXN0LCByZXNvbHZlIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0cmVhbSkge1xuICAgICAgICByZXF1ZXN0LnF1ZXJ5KHF1ZXJ5KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXF1ZXN0KTtcbiAgICAgIH1cblxuICAgICAgLy9yZWNvcmRzZXQgcmVxdWVzdCwgcmV0dXJuIHByb21pc2UgZm9yIHJlc3VsdFxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtcbiAgICAgICAgcmVxdWVzdC5xdWVyeShxdWVyeSxmdW5jdGlvbihlcnIscmVjb3Jkc2V0KXtcbiAgICAgICAgICAvL2Vycm9yIHByb2Nlc3NpbmcgcXVlcnksIHJlamVjdCBwcm9taXNlXG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuXG4gICAgICAgICAgLy9xdWVyeSBzdWNjZXNzZnVsLCByZXNvbHZlIHByb21pc2VcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiByZXF1ZXN0LnBhcmFtZXRlcnNcbiAgICAgICAgICAgICxyZWNvcmRzZXQ6IHJlY29yZHNldCB8fCBbXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgfSk7XG59O1xuXG5cblxuXG5cbmZ1bmN0aW9uIGFkZFBhcmFtKHJlcXVlc3QsIGluZGV4LCBwYXJhbSkge1xuICAvL3BhcmFtIGlzIG1ldGhvZCwgY2FsbCBpdCB3aXRoIHJlcXVlc3QvaW5kZXggLSBzaG91bGQgcmV0dXJuIGl0J3Mgb3duIHBhcmFtZXRlciBuYW1lXG4gIGlmICh0eXBlb2YgcGFyYW0gPT09ICdmdW5jdGlvbicpIHJldHVybiBwYXJhbShyZXF1ZXN0LGluZGV4KTtcblxuICB2YXIgcGFyYW1OYW1lID0gJ21zc3FsbmdfcGFyYW1fJyArIGluZGV4LnRvU3RyaW5nKCk7XG4gIHJlcXVlc3QuaW5wdXQocGFyYW1OYW1lLCBwYXJhbSk7XG5cbiAgLy9paWZlIC0gYWxsb3dzIGZvciBmYXN0IHJldHVybiBmcm9tIGV2YWx1YXRpb25cbiAgdmFyIGNsZWFuID0gY2xlYW5QYXJhbWV0ZXIocGFyYW0pO1xuICByZXR1cm4gcmVxdWVzdC5pbnB1dChwYXJhbU5hbWUsIGNsZWFuWzBdLCBjbGVhblsxXSk7XG5cbiAgLy9yZXR1cm4gcGFyYW1ldGVyIG5hbWUgdXNlZDtcbiAgcmV0dXJuIHBhcmFtTmFtZTtcbn1cblxuIl19