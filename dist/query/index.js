"use strict";

var Promise = require("i-promise");
var mssql = require("mssql");
var clone = require("safe-clone-deep");
var cleanParameter = require("./clean-parameter");
var debug = require("debug")("mssql-ng");

module.exports = processQuery;

function processQuery(connection, options, templateParts, params) {

  debug("processQuery", "begin", options, templateParts, params);

  var request = new mssql.Request(connection);
  var query = templateParts[0]; //add first part, subsequent parts added inline
  var paramName = undefined;

  request.stream = !!(options && options.stream);

  for (var i = 0; i < params.length; i++) {
    paramName = addParam(request, i, params[i]);
    debug("added param", paramName);
    query += "@" + paramName + templateParts[i + 1];
  }

  //streaming request, resolve request
  if (request.stream) {
    debug("processQuery", "resolve stream", query, request);
    request.query(query);
    return Promise.resolve(request);
  }

  //recordset request, return promise for result
  debug("processQuery", "resolve promise", query, request);
  return new Promise(function (resolve, reject) {
    request.query(query, function (err, recordset) {
      debug("processQuery", "resolved query", err, recordset);

      //error processing query, reject promise
      if (err) return reject(err);

      //query successful, resolve promise
      return resolve({
        parameters: request.parameters,
        recordset: recordset || []
      });
    });
  });
};

function addParam(request, index, param) {
  debug("addParam", "begin", index);

  var paramName = null;

  //param is method, call it with request/index - should return it's own parameter name
  if (typeof param === "function") {
    paramName = param(request, index);
    debug("addParam", "resolved", paramName);
    return paramName;
  }

  paramName = "mssqlng_param_" + index.toString();

  //iife - allows for fast return from evaluation
  var clean = cleanParameter(param);
  debug("addParam", "add input", paramName, clean[0], clean[1]);
  request.input(paramName, clean[0], clean[1]);

  //return parameter name used;
  return paramName;
}
//# sourceMappingURL=data:application/json;base64,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QyxPQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsU0FBSyxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDekMsV0FBTyxTQUFTLENBQUM7R0FDbEI7O0FBRUQsV0FBUyxHQUFHLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7O0FBR2hELE1BQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxPQUFLLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlELFNBQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBRzdDLFNBQU8sU0FBUyxDQUFDO0NBQ2xCIiwiZmlsZSI6InNyYy9xdWVyeS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBQcm9taXNlID0gcmVxdWlyZSgnaS1wcm9taXNlJyk7XG5sZXQgbXNzcWwgPSByZXF1aXJlKCdtc3NxbCcpO1xubGV0IGNsb25lID0gcmVxdWlyZSgnc2FmZS1jbG9uZS1kZWVwJyk7XG5sZXQgY2xlYW5QYXJhbWV0ZXIgPSByZXF1aXJlKCcuL2NsZWFuLXBhcmFtZXRlcicpO1xubGV0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnbXNzcWwtbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzUXVlcnk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NRdWVyeShjb25uZWN0aW9uLG9wdGlvbnMsdGVtcGxhdGVQYXJ0cyxwYXJhbXMpe1xuXG4gIGRlYnVnKCdwcm9jZXNzUXVlcnknLCdiZWdpbicsb3B0aW9ucyx0ZW1wbGF0ZVBhcnRzLHBhcmFtcyk7XG5cbiAgbGV0IHJlcXVlc3QgPSBuZXcgbXNzcWwuUmVxdWVzdChjb25uZWN0aW9uKTtcbiAgbGV0IHF1ZXJ5ID0gdGVtcGxhdGVQYXJ0c1swXTsgLy9hZGQgZmlyc3QgcGFydCwgc3Vic2VxdWVudCBwYXJ0cyBhZGRlZCBpbmxpbmVcbiAgbGV0IHBhcmFtTmFtZTtcblxuICByZXF1ZXN0LnN0cmVhbSA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJlYW0pO1xuXG4gIGZvciAobGV0IGk9MDsgaTxwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJhbU5hbWUgPSBhZGRQYXJhbShyZXF1ZXN0LCBpLCBwYXJhbXNbaV0pO1xuICAgIGRlYnVnKCdhZGRlZCBwYXJhbScsIHBhcmFtTmFtZSk7XG4gICAgcXVlcnkgKz0gJ0AnICsgcGFyYW1OYW1lICsgdGVtcGxhdGVQYXJ0c1tpKzFdOyAgICAgICAgXG4gIH1cblxuICAvL3N0cmVhbWluZyByZXF1ZXN0LCByZXNvbHZlIHJlcXVlc3RcbiAgaWYgKHJlcXVlc3Quc3RyZWFtKSB7XG4gICAgZGVidWcoJ3Byb2Nlc3NRdWVyeScsJ3Jlc29sdmUgc3RyZWFtJyxxdWVyeSxyZXF1ZXN0KTtcbiAgICByZXF1ZXN0LnF1ZXJ5KHF1ZXJ5KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3QpO1xuICB9XG5cbiAgLy9yZWNvcmRzZXQgcmVxdWVzdCwgcmV0dXJuIHByb21pc2UgZm9yIHJlc3VsdFxuICBkZWJ1ZygncHJvY2Vzc1F1ZXJ5JywncmVzb2x2ZSBwcm9taXNlJyxxdWVyeSxyZXF1ZXN0KTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtcbiAgICByZXF1ZXN0LnF1ZXJ5KHF1ZXJ5LGZ1bmN0aW9uKGVycixyZWNvcmRzZXQpe1xuICAgICAgZGVidWcoJ3Byb2Nlc3NRdWVyeScsJ3Jlc29sdmVkIHF1ZXJ5JyxlcnIscmVjb3Jkc2V0KTtcblxuICAgICAgLy9lcnJvciBwcm9jZXNzaW5nIHF1ZXJ5LCByZWplY3QgcHJvbWlzZVxuICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuXG4gICAgICAvL3F1ZXJ5IHN1Y2Nlc3NmdWwsIHJlc29sdmUgcHJvbWlzZVxuICAgICAgcmV0dXJuIHJlc29sdmUoe1xuICAgICAgICBwYXJhbWV0ZXJzOiByZXF1ZXN0LnBhcmFtZXRlcnNcbiAgICAgICAgLHJlY29yZHNldDogcmVjb3Jkc2V0IHx8IFtdXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbn07XG5cblxuXG5cblxuZnVuY3Rpb24gYWRkUGFyYW0ocmVxdWVzdCwgaW5kZXgsIHBhcmFtKSB7XG4gIGRlYnVnKCdhZGRQYXJhbScsJ2JlZ2luJywgaW5kZXgpO1xuXG4gIGxldCBwYXJhbU5hbWUgPSBudWxsO1xuXG4gIC8vcGFyYW0gaXMgbWV0aG9kLCBjYWxsIGl0IHdpdGggcmVxdWVzdC9pbmRleCAtIHNob3VsZCByZXR1cm4gaXQncyBvd24gcGFyYW1ldGVyIG5hbWVcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHBhcmFtTmFtZSA9IHBhcmFtKHJlcXVlc3QsaW5kZXgpO1xuICAgIGRlYnVnKCdhZGRQYXJhbScsICdyZXNvbHZlZCcsIHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIHBhcmFtTmFtZTtcbiAgfVxuXG4gIHBhcmFtTmFtZSA9ICdtc3NxbG5nX3BhcmFtXycgKyBpbmRleC50b1N0cmluZygpO1xuXG4gIC8vaWlmZSAtIGFsbG93cyBmb3IgZmFzdCByZXR1cm4gZnJvbSBldmFsdWF0aW9uXG4gIGxldCBjbGVhbiA9IGNsZWFuUGFyYW1ldGVyKHBhcmFtKTtcbiAgZGVidWcoJ2FkZFBhcmFtJywgJ2FkZCBpbnB1dCcsIHBhcmFtTmFtZSwgY2xlYW5bMF0sIGNsZWFuWzFdKTtcbiAgcmVxdWVzdC5pbnB1dChwYXJhbU5hbWUsIGNsZWFuWzBdLCBjbGVhblsxXSk7XG5cbiAgLy9yZXR1cm4gcGFyYW1ldGVyIG5hbWUgdXNlZDtcbiAgcmV0dXJuIHBhcmFtTmFtZTtcbn1cblxuIl19