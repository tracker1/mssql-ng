"use strict";

var Promise = require("i-promise");
var mssql = require("mssql");
var clone = require("safe-clone-deep");
var cleanParameter = require("./clean-parameter");

module.exports = processQuery;

function processQuery(connectionPromise, options, templateParts, params) {
  return connectionPromise.then(function (conn) {
    var request = new mssql.Request(conn);
    var query = templateParts[0]; //add first part, subsequent parts added inline
    var param = undefined;

    request.stream = !!(options && options.stream);

    for (var i = 0; i < params.length; i++) {
      paramName = addParam(request, i, params[i]);
      query += "@" + paramName + templateParts[i + 1];
    }

    //streaming request, resolve request
    if (request.stream) {
      request.query(query);
      return Promise.resolve(request);
    }

    //recordset request, return promise for result
    return new Promise(function (resolve, reject) {
      request.query(query, function (err, recordset) {
        //error processing query, reject promise
        if (err) return reject(err);

        //query successful, resolve promise
        return resolve({
          parameters: request.parameters,
          recordset: recordset || []
        });
      });
    });
  });
};

function addParam(request, index, param) {
  //param is method, call it with request/index - should return it's own parameter name
  if (typeof param === "function") {
    return param(request, index);
  }var paramName = "mssqlng_param_" + index.toString();

  //iife - allows for fast return from evaluation
  var clean = cleanParameter(param);
  request.input(paramName, clean[0], clean[1]);

  //return parameter name used;
  return paramName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdkMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O0FBRWxELE1BQU0sQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDOztBQUU5QixTQUFTLFlBQVksQ0FBQyxpQkFBaUIsRUFBQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sRUFBQztBQUNuRSxTQUFPLGlCQUFpQixDQUNyQixJQUFJLENBQUMsVUFBUyxJQUFJLEVBQUM7QUFDbEIsUUFBSSxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLFFBQUksS0FBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixRQUFJLEtBQUssWUFBQSxDQUFDOztBQUVWLFdBQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQzs7QUFFL0MsU0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbEMsZUFBUyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLFdBQUssSUFBSSxHQUFHLEdBQUcsU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0M7OztBQUdELFFBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUNsQixhQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JCLGFBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNqQzs7O0FBR0QsV0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBQyxNQUFNLEVBQUM7QUFDekMsYUFBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsVUFBUyxHQUFHLEVBQUMsU0FBUyxFQUFDOztBQUV6QyxZQUFJLEdBQUcsRUFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0FBRzVCLGVBQU8sT0FBTyxDQUFDO0FBQ2Isb0JBQVUsRUFBRSxPQUFPLENBQUMsVUFBVTtBQUM3QixtQkFBUyxFQUFFLFNBQVMsSUFBSSxFQUFFO1NBQzVCLENBQUMsQ0FBQztPQUNKLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUVKLENBQUMsQ0FBQztDQUNOLENBQUM7O0FBTUYsU0FBUyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7O0FBRXZDLE1BQUksT0FBTyxLQUFLLEtBQUssVUFBVTtBQUFFLFdBQU8sS0FBSyxDQUFDLE9BQU8sRUFBQyxLQUFLLENBQUMsQ0FBQztHQUFBLEFBRTdELElBQUksU0FBUyxHQUFHLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7O0FBR3BELE1BQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxTQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OztBQUc3QyxTQUFPLFNBQVMsQ0FBQztDQUNsQiIsImZpbGUiOiJzcmMvcXVlcnkvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgUHJvbWlzZSA9IHJlcXVpcmUoJ2ktcHJvbWlzZScpO1xubGV0IG1zc3FsID0gcmVxdWlyZSgnbXNzcWwnKTtcbmxldCBjbG9uZSA9IHJlcXVpcmUoJ3NhZmUtY2xvbmUtZGVlcCcpO1xubGV0IGNsZWFuUGFyYW1ldGVyID0gcmVxdWlyZSgnLi9jbGVhbi1wYXJhbWV0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzUXVlcnk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NRdWVyeShjb25uZWN0aW9uUHJvbWlzZSxvcHRpb25zLHRlbXBsYXRlUGFydHMscGFyYW1zKXtcbiAgcmV0dXJuIGNvbm5lY3Rpb25Qcm9taXNlXG4gICAgLnRoZW4oZnVuY3Rpb24oY29ubil7XG4gICAgICBsZXQgcmVxdWVzdCA9IG5ldyBtc3NxbC5SZXF1ZXN0KGNvbm4pO1xuICAgICAgbGV0IHF1ZXJ5ID0gdGVtcGxhdGVQYXJ0c1swXTsgLy9hZGQgZmlyc3QgcGFydCwgc3Vic2VxdWVudCBwYXJ0cyBhZGRlZCBpbmxpbmVcbiAgICAgIGxldCBwYXJhbTtcblxuICAgICAgcmVxdWVzdC5zdHJlYW0gPSAhIShvcHRpb25zICYmIG9wdGlvbnMuc3RyZWFtKTtcblxuICAgICAgZm9yIChsZXQgaT0wOyBpPHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJhbU5hbWUgPSBhZGRQYXJhbShyZXF1ZXN0LCBpLCBwYXJhbXNbaV0pO1xuICAgICAgICBxdWVyeSArPSAnQCcgKyBwYXJhbU5hbWUgKyB0ZW1wbGF0ZVBhcnRzW2krMV07ICAgICAgICBcbiAgICAgIH1cblxuICAgICAgLy9zdHJlYW1pbmcgcmVxdWVzdCwgcmVzb2x2ZSByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdHJlYW0pIHtcbiAgICAgICAgcmVxdWVzdC5xdWVyeShxdWVyeSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVxdWVzdCk7XG4gICAgICB9XG5cbiAgICAgIC8vcmVjb3Jkc2V0IHJlcXVlc3QsIHJldHVybiBwcm9taXNlIGZvciByZXN1bHRcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7XG4gICAgICAgIHJlcXVlc3QucXVlcnkocXVlcnksZnVuY3Rpb24oZXJyLHJlY29yZHNldCl7XG4gICAgICAgICAgLy9lcnJvciBwcm9jZXNzaW5nIHF1ZXJ5LCByZWplY3QgcHJvbWlzZVxuICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcblxuICAgICAgICAgIC8vcXVlcnkgc3VjY2Vzc2Z1bCwgcmVzb2x2ZSBwcm9taXNlXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoe1xuICAgICAgICAgICAgcGFyYW1ldGVyczogcmVxdWVzdC5wYXJhbWV0ZXJzXG4gICAgICAgICAgICAscmVjb3Jkc2V0OiByZWNvcmRzZXQgfHwgW11cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgIH0pO1xufTtcblxuXG5cblxuXG5mdW5jdGlvbiBhZGRQYXJhbShyZXF1ZXN0LCBpbmRleCwgcGFyYW0pIHtcbiAgLy9wYXJhbSBpcyBtZXRob2QsIGNhbGwgaXQgd2l0aCByZXF1ZXN0L2luZGV4IC0gc2hvdWxkIHJldHVybiBpdCdzIG93biBwYXJhbWV0ZXIgbmFtZVxuICBpZiAodHlwZW9mIHBhcmFtID09PSAnZnVuY3Rpb24nKSByZXR1cm4gcGFyYW0ocmVxdWVzdCxpbmRleCk7XG5cbiAgdmFyIHBhcmFtTmFtZSA9ICdtc3NxbG5nX3BhcmFtXycgKyBpbmRleC50b1N0cmluZygpO1xuXG4gIC8vaWlmZSAtIGFsbG93cyBmb3IgZmFzdCByZXR1cm4gZnJvbSBldmFsdWF0aW9uXG4gIHZhciBjbGVhbiA9IGNsZWFuUGFyYW1ldGVyKHBhcmFtKTtcbiAgcmVxdWVzdC5pbnB1dChwYXJhbU5hbWUsIGNsZWFuWzBdLCBjbGVhblsxXSk7XG5cbiAgLy9yZXR1cm4gcGFyYW1ldGVyIG5hbWUgdXNlZDtcbiAgcmV0dXJuIHBhcmFtTmFtZTtcbn1cblxuIl19